<Window x:Class="WpfOverview.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfOverview"
        xmlns:models="clr-namespace:WpfOverview.Models"
        xmlns:converters="clr-namespace:WpfOverview.Converters"
        
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="MainWindow" Height="610.886" Width="742.435" x:Name="wMain" WindowState="Maximized">
    <StackPanel>
        <StackPanel.Resources>
            <converters:AliveStatusConverter x:Key="converterAliveStatus"/>
            <BooleanToVisibilityConverter x:Key="converterBooleanToVisibility"/>
        </StackPanel.Resources>
        <TabControl>
            <TabItem Header="Basic Controls:">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0" Margin="10">
                        <TextBlock Text="Text Controls:"/>
                        <TextBlock Text="Text Block"></TextBlock>
                        <Label>
                            <ContentControl>
                                <TextBlock Text="Label"></TextBlock>
                            </ContentControl>
                        </Label>
                        <Label  Content="Username:"/>
                        <TextBox/>
                        <Label  Content="Password:"/>
                        <PasswordBox/>
                    </StackPanel>
                    <StackPanel Grid.Column="1" Margin="10">
                        <TextBlock Text="Button Controls:"/>
                        <Button Click="Button_Click">
                            <TextBlock Text="Click me!"></TextBlock>
                        </Button>
                        <ToggleButton Content="Toggle button" Click="ToggleButton_Click" Checked="ToggleButton_Checked"/>
                        <RepeatButton Content="Repeat button" Click="RepeatButton_Click" Interval="1000"/>
                        <TextBlock x:Name="tbCounter" Text="0"/>
                    </StackPanel>
                    <StackPanel Grid.Column="2" Margin="10">
                        <TextBlock Text="Input Controls:"/>
                        <TextBox Text="Enter username:"/>
                        <PasswordBox Password="Password"/>
                        <CheckBox IsChecked="True" Content="Is alive"/>
                        <RadioButton GroupName="Gender" IsChecked="True" Content="Male"/>
                        <RadioButton GroupName="Gender" Content="Female"/>
                        <ComboBox SelectedIndex="0">
                            <ComboBoxItem Content="First"/>
                            <ComboBoxItem Content="Second"/>
                            <ComboBoxItem Content="Third"/>
                        </ComboBox>
                        <Calendar DisplayDate="2001-12-24"/>
                        <DatePicker SelectedDate="2024-3-12"/>
                        <Slider Minimum="0" Maximum="100" Value="50"/>
                    </StackPanel>
                    <StackPanel Grid.Column="3">
                        <TextBlock Text="Media Controls:"/>
                        <Image Source="Media/Bitmap1.bmp"/>
                        <!--<MediaElement x:Name="meSpongebob"  Source="C:\Users\User\source\repos\WpfOverview\Media\spongebob.mp4" Width="100" Height="100" LoadedBehavior="Play" Volume="1"/>-->
                        <Button Content="Replay!" Click="MoveVideoToStart"/>
                    </StackPanel>
                    <StackPanel Grid.Column="4">
                        <TextBlock Text="Container Controls:"/>
                        <Border>
                            <Border.BorderThickness>2</Border.BorderThickness>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Red"/>
                            </Border.BorderBrush>
                            <TextBlock>
                                <TextBlock.Text>Bordered text!</TextBlock.Text>
                            </TextBlock>
                        </Border>
                        <TabControl>
                            <TabItem Header="First" IsSelected="True">
                                <TabItem.Content>
                                    <StackPanel>
                                        <TextBlock>First</TextBlock>
                                        <TextBlock>Second</TextBlock>
                                    </StackPanel>
                                </TabItem.Content>
                            </TabItem>
                            <TabItem Header="Second">
                                <TabItem.Content>
                                    <StackPanel>
                                        <TextBlock>Third</TextBlock>
                                        <TextBlock>Fourth</TextBlock>
                                    </StackPanel>
                                </TabItem.Content>
                            </TabItem>
                        </TabControl>
                        <Expander Header="Click to expand" Height="100" IsExpanded="False">
                            <Grid Background="#FFE5E5E5">
                                <Button Background="PeachPuff">Hi</Button>
                            </Grid>
                        </Expander>
                        <GroupBox Header="Gender">
                            <StackPanel>
                                <RadioButton Content="Male"/>
                                <RadioButton Content="Female"/>
                                <RadioButton Content="Other"/>
                            </StackPanel>
                        </GroupBox>
                    </StackPanel>
                </Grid>
            </TabItem>
            <TabItem Header="Panels:">
                <StackPanel>
                    <Canvas HorizontalAlignment="Stretch" Height="75">
                        <Button Canvas.Top="50" Canvas.Left="50">Button in canvas.</Button>
                    </Canvas>
                    <TextBlock>Docking:</TextBlock>
                    <DockPanel>
                        <Button DockPanel.Dock="Top">4 dock</Button>
                        <Button DockPanel.Dock="Bottom">1 dock</Button>
                        <Button DockPanel.Dock="Left">3 dock</Button>
                        <Button DockPanel.Dock="Right">2 dock</Button>
                        <Button>5 dock</Button>
                    </DockPanel>
                    <TextBlock>Wrap:</TextBlock>
                    <WrapPanel Orientation="Vertical" Height="59">
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                        <TextBlock>Hi</TextBlock>
                    </WrapPanel>
                </StackPanel>
            </TabItem>
            <TabItem Header="Data:">
                <StackPanel x:Name="spData">
                    <StackPanel.Resources>
                        <SolidColorBrush x:Key="rColor">
                            <SolidColorBrush.Color>Teal</SolidColorBrush.Color>
                        </SolidColorBrush>
                        <SolidColorBrush x:Key="drColor" Color="Red"/>
                    </StackPanel.Resources>
                    <TextBlock>Resources:</TextBlock>
                    <TextBlock Foreground="{StaticResource rColor}">Text color is from static resource</TextBlock>
                    <TextBlock Foreground="{DynamicResource drColor}">Text color is from dynamic resource, changes based on checkbox</TextBlock>
                    <CheckBox IsChecked="False" IsThreeState="False" Content="Checked - Blue, Unchecked - Red" Checked="CheckBox_Checked" Unchecked="CheckBox_Unchecked"/>
                    <TextBlock>DataContext Data Binding:</TextBlock>
                    <TextBox Text="{Binding FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBox Text="{Binding LastName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBlock Text="{Binding FullName, Mode=OneWay}"/>
                    <TextBlock Text="Element Data Binding:"/>
                    <TextBlock Text="{Binding ElementName=spData, Path=Children.Count}"/>
                    <TextBlock Text="Relative Element Data Binding:"/>
                    <Label>
                        <WrapPanel>
                            <TextBlock>My width:</TextBlock>
                            <TextBlock Text="{Binding RelativeSource={RelativeSource Self}, Path=ActualWidth}"/>
                        </WrapPanel>
                    </Label>
                    <Label>
                        <WrapPanel>
                            <TextBlock>Window width:</TextBlock>
                            <TextBlock Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}, AncestorLevel=1}, Path=ActualWidth}"/>
                        </WrapPanel>
                    </Label>
                </StackPanel>
            </TabItem>
            <TabItem Header="Designing:">
                <StackPanel>
                    <StackPanel.Resources>
                        <Style TargetType="Button" x:Key="rBtnHover">
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.Setters>
                                        <Setter Property="FontWeight" Value="ExtraBold"/>
                                    </Trigger.Setters>
                                </Trigger>
                                <DataTrigger Binding="{Binding ElementName=cbRedText, Path=IsChecked}" Value="True">
                                    <Setter Property="Foreground" Value="Red"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Resources>
                    <TextBlock Text="Style:"/>
                    <Button Content="Button with thick border">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="BorderThickness" Value="5"/>
                                <Setter Property="BorderBrush" Value="Teal"/>
                                <Setter Property="Padding" Value="10"/>
                            </Style>
                        </Button.Style>
                    </Button>
                    <TextBlock Text="Trigger:"/>
                    <Button Content="Text bold on hover." Style="{StaticResource rBtnHover}"/>
                    <CheckBox x:Name="cbRedText" IsChecked="False" Content="Text red on checked"/>
                    <TextBlock Text="Transforms:"/>
                    <Rectangle Width="100" Height="20" HorizontalAlignment="Left">
                        <Rectangle.Fill>
                            <SolidColorBrush Color="Red" Opacity="0.5"/>
                        </Rectangle.Fill>
                        <Rectangle.RenderTransform>
                            <ScaleTransform ScaleX="3" ScaleY="3"/>
                        </Rectangle.RenderTransform>
                    </Rectangle>
                    <Rectangle Width="100" Height="20" Fill="Aqua" HorizontalAlignment="Left">
                        <Rectangle.LayoutTransform>
                            <ScaleTransform ScaleX="2" ScaleY="2"/>
                        </Rectangle.LayoutTransform>
                    </Rectangle>
                    <TextBlock Text="Events:"/>
                    <Button Content="Right click for event messages" MouseDown="Button_MouseDown"/>
                    <TextBlock Text="Animations:"/>
                    <Button MinWidth="200" Content="Click to increase width" HorizontalAlignment="Left">
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Background" Value="Orange"/>
                                <Setter Property="Padding" Value="0 10 5 15"/>

                                <Style.Triggers>
                                    <EventTrigger RoutedEvent="Click">
                                        <EventTrigger.Actions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Duration="0:0:1" From="200" To="400" Storyboard.TargetProperty="(Button.MinWidth)"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger.Actions>
                                    </EventTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    <Ellipse Width="50" Height="50" StrokeThickness="5" Stroke="Red" StrokeDashArray="1">
                        <Ellipse.RenderTransform>
                            <RotateTransform Angle="0" CenterX="25" CenterY="25"/>
                        </Ellipse.RenderTransform>
                        <Ellipse.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation From="0" To="360" Duration="0:0:3" RepeatBehavior="Forever" Storyboard.TargetProperty="(Rectangle.RenderTransform).(RotateTransform.Angle)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Ellipse.Triggers>
                    </Ellipse>
                </StackPanel>
            </TabItem>
            <TabItem Header="Property:">
                <StackPanel>
                    <TextBlock Text="Dependency Property:"/>
                    <TextBox Text="{Binding ElementName=wMain, Path=MyProperty, UpdateSourceTrigger=PropertyChanged}"/>
                    <TextBlock Text="{Binding ElementName=wMain, Path=MyProperty}"/>
                </StackPanel>
            </TabItem>
            <TabItem Header="Templates:">
                <StackPanel>
                    <TextBlock>DataTemplate:</TextBlock>
                    <Label>
                        <Label.ContentTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="FirstName"/>
                                    <TextBlock Text="LastName"/>
                                </StackPanel>
                            </DataTemplate>
                        </Label.ContentTemplate>
                    </Label>
                    <ItemsControl>
                        <ItemsControl.Items>
                            <system:String>a</system:String>
                            <system:String>b</system:String>
                            <system:String>c</system:String>
                        </ItemsControl.Items>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <StackPanel>
                                    <TextBlock Text="{Binding}" Foreground="Red" FontWeight="Bold" FontSize="20"></TextBlock>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    <TextBlock>ControlTemplate:</TextBlock>
                    <Label>
                        <Label.Content>
                            Hello everyone!
                        </Label.Content>
                        <Label.Template>
                            <ControlTemplate TargetType="Label">
                                <StackPanel>
                                    <Border BorderBrush="Black" BorderThickness="3" Padding="5">
                                        <!--ContentPresenter & ItemsPresenter-->
                                        <ContentPresenter />
                                    </Border>
                                </StackPanel>
                            </ControlTemplate>
                        </Label.Template>
                    </Label>
                    <Button Content="Don't click me">
                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <Border BorderBrush="Orange" Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}">
                                    <ContentPresenter/>
                                </Border>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button Content="Custom Button" Style="{DynamicResource ButtonStyle1}">
                        <Button.Resources>
                            <Style x:Key="FocusVisual">
                                <Setter Property="Control.Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                            <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
                            <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
                            <SolidColorBrush x:Key="Button.MouseOver.Background" Color="Red"/>
                            <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
                            <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
                            <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
                            <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
                            <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
                            <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
                            <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                                <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
                                <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                <Setter Property="Padding" Value="10"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsDefaulted" Value="true">
                                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="true">
                                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                                </Trigger>
                                                <Trigger Property="IsPressed" Value="true">
                                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="false">
                                                    <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Button.Resources>
                    </Button>
                    <DataGrid x:Name="dgPeople" Style="{DynamicResource DataGridStyle1}">
                        <DataGrid.Resources>
                            <Style x:Key="DataGridStyle1" TargetType="{x:Type DataGrid}">
                                <Setter Property="Background" Value="#DDD"/>
                                <Setter Property="Foreground" Value="#333"/>
                                <Setter Property="BorderBrush" Value="#333"/>
                                <Setter Property="BorderThickness" Value="2"/>
                                <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
                                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type DataGrid}">
                                            <Border BorderBrush="#333" BorderThickness="{TemplateBinding BorderThickness}" Background="#ddd" Padding="5" SnapsToDevicePixels="True" Margin="3">
                                                <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                                                    <ScrollViewer.Template>
                                                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                                            <Grid>
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="*"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                </Grid.ColumnDefinitions>
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="Auto"/>
                                                                    <RowDefinition Height="*"/>
                                                                    <RowDefinition Height="Auto"/>
                                                                </Grid.RowDefinitions>
                                                                <Button Command="{x:Static DataGrid.SelectAllCommand}" Margin="10" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                                <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                                                <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                                                                <Grid Grid.Column="1" Grid.Row="2">
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                                        <ColumnDefinition Width="*"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                                                                </Grid>
                                                            </Grid>
                                                        </ControlTemplate>
                                                    </ScrollViewer.Template>
                                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </ScrollViewer>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsGrouping" Value="true"/>
                                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                    </MultiTrigger>
                                </Style.Triggers>
                            </Style>
                        </DataGrid.Resources>
                    </DataGrid>
                </StackPanel>
            </TabItem>
            <TabItem Header="Collections:">
                <StackPanel>
                    <TextBlock Text="ItemsControl:"/>
                    <ItemsControl>
                        <models:Person FirstName="Will" LastName="Smith"/>
                        <models:Person FirstName="Bill" LastName="Notsmith"/>
                        <models:Person FirstName="Jenny" LastName="Penny"/>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <WrapPanel>
                                    <TextBlock Text="{Binding FirstName}"/>
                                    <TextBlock Text=" "/>
                                    <TextBlock Text="{Binding LastName}"/>
                                </WrapPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    <TextBlock Text="ListBox. Select some:"/>
                    <ListBox x:Name="lbPeople" SelectionChanged="lbPeople_SelectionChanged">
                        <models:Person FirstName="Will" LastName="Smith"/>
                        <models:Person FirstName="Bill" LastName="Notsmith"/>
                        <models:Person FirstName="Jenny" LastName="Penny"/>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <WrapPanel>
                                    <TextBlock Text="{Binding FirstName}"/>
                                    <TextBlock Text=" "/>
                                    <TextBlock Text="{Binding LastName}"/>
                                </WrapPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ListBox>
                    <TextBlock x:Name="tbSelectedLb" Text="Selected listbox item:"/>
                    <TextBlock Text="LisstView:"/>
                    <ListView>
                        <models:Person FirstName="Will" LastName="Smith"/>
                        <models:Person FirstName="Bill" LastName="Notsmith"/>
                        <models:Person FirstName="Jenny" LastName="Penny"/>
                        <ListView.View>
                            <GridView >
                                <GridView.Columns>
                                    <GridViewColumn Header="First name:" DisplayMemberBinding="{Binding FirstName}"/>
                                    <GridViewColumn Header="Last name:" DisplayMemberBinding="{Binding LastName}"/>
                                    <GridViewColumn Header="Full name:" DisplayMemberBinding="{Binding FullName}"/>
                                </GridView.Columns>
                            </GridView>
                        </ListView.View>
                    </ListView>
                    <TextBlock Text="DataGrid:"/>
                    <DataGrid x:Name="dgPeople2" AutoGenerateColumns="False" CanUserSortColumns="True">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn Header="First name:" CanUserSort="True" SortDirection="Descending">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding FirstName}"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                    <TextBlock Text="Sorting, Filtering &amp; Grouping:"/>
                    <DataGrid x:Name="dgOrganized">
                    </DataGrid>
                    <TextBlock Text="Sort By:"/>
                    <ComboBox x:Name="cbSortBy" SelectedIndex="0" HorizontalAlignment="Left" SelectionChanged="cbSortBy_SelectionChanged">
                        <system:String>None</system:String>
                        <system:String>FirstName</system:String>
                        <system:String>LastName</system:String>
                    </ComboBox>
                    <CheckBox Content="Group by 'alive' status" Checked="CheckBox_Checked_1" Unchecked="CheckBox_Unchecked_1"/>
                    <TextBlock Text="Filter By:"/>
                    <GroupBox>
                        <StackPanel ToggleButton.Checked="StackPanel_Checked">
                            <RadioButton Content="None" GroupName="filter"/>
                            <RadioButton Content="Is alive" GroupName="filter"/>
                            <RadioButton Content="Is dead" GroupName="filter"/>
                        </StackPanel>
                    </GroupBox>
                </StackPanel>
            </TabItem>
            <TabItem Header="Windows &amp; Dialogs:">
                <StackPanel>
                    <TextBlock Text="Windows:"/>
                    <Button Content="Open window" Click="Button_Click_1"/>
                    <TextBlock Text="Dialogs:"/>
                    <Button Content="Message box 1" Click="Button_Click_2"/>
                    <TextBlock x:Name="tbMessageBoxResult" Text="Message box result:"/>
                    <Button Content="Save file:" Click="Button_Click_3"/>
                    <TextBlock x:Name="tbSaveFileResult" Text="Save file result: "/>
                </StackPanel>
            </TabItem>
            <TabItem Header="Converters:">
                <StackPanel>
                    <StackPanel.DataContext>
                        <models:SuperPerson Age="50" FirstName="Josh" LastName="Smith" IsAlive="True"/>
                    </StackPanel.DataContext>
                    <TextBlock Text="Change checkbox value"/>
                    <TextBlock Text="{Binding Path=IsAlive, Converter={StaticResource converterAliveStatus}, UpdateSourceTrigger=PropertyChanged}"/>
                    <CheckBox IsChecked="{Binding Path=IsAlive, UpdateSourceTrigger=PropertyChanged}" Content="Person is alive"/>
                </StackPanel>
            </TabItem>
            <TabItem Header="Validation:">
                <StackPanel>
                    <StackPanel.DataContext>
                        <models:ValidationModel/>
                    </StackPanel.DataContext>
                    <TextBlock Text="Exception Validation, no longer than 10 characters:"/>
                    <TextBox x:Name="tbValidationException" Text="{Binding Path=SomeName, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"/>
                    <TextBlock Text="Has error:"/>
                    <TextBlock Text="{Binding ElementName=tbValidationException, Path=(Validation.HasError)}"/>
                    <TextBlock Visibility="{Binding ElementName=tbValidationException,Path=(Validation.HasError), Converter={StaticResource converterBooleanToVisibility}}" Text="{Binding ElementName=tbValidationException, Path=(Validation.Errors)[0].ErrorContent}"/>
                    <TextBlock Text="{Binding Path=SomeName}"/>
                </StackPanel>
            </TabItem>
        </TabControl>
    </StackPanel>
</Window>
